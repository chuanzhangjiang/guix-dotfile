#+TITLE: =/home/daviwil/.dotfiles=

This repo is the home of my custom system configuration which enables a consistent computing experience across multiple machines.  These days I primarily use GNU/Linux via the [[https://guix.gnu.org][GNU Guix distribution]].

I manage the various configuration files in this repo using a combination of Guix Home and [[https://www.gnu.org/software/stow/][GNU Stow]].  This allows me to set up symlinks for all of my user-level configuration using two commands:

#+BEGIN_SRC sh
stow .files/
update-home
#+END_SRC

The [[file:.files/.bin/update-home][update-home]] command is my own custom script to launch the =guix home= command.

* Principles

The configuration files in this repo crystallize a workflow that is increasingly effective and satisfying for daily use.  When choosing tools and putting them together, I generally follow these principles:

** Keyboard Focused

I prefer tools that enable me to control everything primarily with the keyboard.  When you work with words and code all day, reaching for the mouse switches your input modality and slows you down.  Using [[https://www.gnu.org/software/emacs/][GNU Emacs]] enables me to have consistent, convenient key bindings for just 80% of what I need to do on a daily basis.  Another 15% is covered by using web sites and apps; [[https://qutebrowser.org/][Qutebrowser]] makes the web browsing experience a lot more keyboard friendly and seamlessly integrates with my Emacs workflow.

** Minimal Distractions

I don't want things on the screen that are unrelated to what I'm doing.  My workflow focuses on a single main screen with an occasional secondary screen (my laptop) when docked.  I very rarely display more than one buffer or window on the main screen at a time.  Emacs makes it easy and fast to switch between open buffers (and workspaces in EXWM) so there's really no reason to have two unrelated things visible on the screen.

I display minimal information in my Emacs mode line (using [[https://github.com/seagle0128/doom-modeline][doom-modeline]]) and I only display a small amount of computer status information in Emacs' =tab-bar-mode=.

** Text-based Configuration

I *really* don't want to use a program that doesn't support text-based configuration files.  I also prefer tools that don't write out those configuration files on my behalf.  This enables me to commit program configuration to source control (this repository) so that I can keep configurations in sync on every machine that I use.

Guix enables me to apply this principle to my /entire system configuration/, even sharing the same base configuration across multiple machines.  This has provided me with a stable, consistent computing experience across the three machines I use on a regular basis.

** Highly Customizable

To perfect my computing workflow, I choose tools that allow me to customize them to fit in smoothly with everything else.  Emacs is the most faithful adherent to this principle as it allows you to intercept or replace the code for just about anything it does.  For other programs, I like to use tools that are either scriptable by some means or enable to you call out to another process (or shell script) to gather information.  Vimb and Polybar both do this, so it's pretty easy to integrate them into the rest of my workflow.

* Literate Configuration

My former literate configuration ([[file:.archive/README.org][archived here]]) has now been replaced by a Guix Home configuration.  I will document this more completely as time permits.

* Check out my YouTube channel

I have created a number of videos on YouTube that will teach you how to make a custom system and desktop environment configuration like mine.  Check out the [[https://www.youtube.com/c/SystemCrafters][System Crafters]] channel, or any of the following playlists:

- [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]]: Step by step creation of a custom Emacs configuration from scratch
- [[https://www.youtube.com/watch?v=f7xB2fFk1tQ&list=PLEoMzSkcN8oNPbEMYEtswOVTvq7CVddCS][Emacs Desktop Environment]]: Create a minimalistic desktop environment with EXWM and other tools
- [[https://www.youtube.com/watch?v=E-NAM9U5JYE&list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN][Emacs IDE]]: Set up a development environment using lsp-mode and dap-mode
- [[https://www.youtube.com/watch?v=wKTKmE1wLyw&list=PLEoMzSkcN8oMHJ6Xil1YdnYtlWd5hHZql][Emacs Tips]]: A variety of tips and explanations of community packages
- [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][Emacs Mail]]: Configuring Emacs as a mail client

* License

Released under the [[./LICENSE][MIT License]] unless otherwise specified by license files in subfolders.
